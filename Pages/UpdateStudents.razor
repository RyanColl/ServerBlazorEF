@page "/students/update/{id}"
@using ServerBlazorEF.Data
@using ServerBlazorEF.Models
@inject StudentService studentService
@inject NavigationManager NavManager
<h1>Update a Student</h1>

@if (students != null) // Update & Delete form
{
    <EditForm Model="@s" OnValidSubmit="@Update">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText class="input-text" placeholder="First Name" id="firstName" @bind-Value="@s.FirstName" /><br />
        <InputText class="input-text" placeholder="Last Name" id="lastName" @bind-Value="@s.LastName" /><br />
        <InputText class="input-text" disabled="true" placeholder="School" id="school" @bind-Value="@s.School" /><br />
        <span class="dropdown">
            <button>Action</button>
            <label>
                <input type="checkbox">
                <ul>
                <li @onclick="() => ChooseSchool(me)">@me</li>
                <li @onclick="() => ChooseSchool(co)">@co</li>
                <li @onclick="() => ChooseSchool(nu)">@nu</li>
                <li @onclick="() => ChooseSchool(mi)">@mi</li>
                <li @onclick="() => ChooseSchool(sc)">@sc</li>
                <li @onclick="() => ChooseSchool(bu)">@bu</li>
                </ul>
            </label>
        </span>
        <button type="submit" class="btn btn-primary">Update</button>
        <button @onclick="@Return" class="btn btn-success">Return</button>
    </EditForm>
}


@code {
    List<Student> students;

    [Parameter]
    public string Id {get; set;}

    string studentId;
    string firstName;
    string lastName;
    string school;

    string me = "Medicine"; string co = "Computing";
    string nu = "Nursing"; string mi = "Mining";
    string sc = "Science"; string bu = "Business";

    Student student;

    Student s;

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        students = await studentService.GetStudentsAsync();
        s = students.Where(f => f.StudentId == Int32.Parse(Id)).FirstOrDefault();
    }
    protected void ChooseSchool(string school) {    
        s.School = school;
    }

    protected void Return()
    {
        NavManager.NavigateTo("/students");
    }

    protected async Task Update()
    {

        Student i = new Student()
        {
            FirstName = firstName,
            LastName = lastName,
            School = school
        };

        await studentService.UpdateStudentAsync(studentId, i);
        await load();
        NavManager.NavigateTo("/students");
    }


}
